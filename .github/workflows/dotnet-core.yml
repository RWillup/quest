name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Linux_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.101
    - name: Install dependencies
      run: dotnet restore src/
    - name: Build
      run: dotnet build src/Quest/ --configuration Release --no-restore
    - name: Test
      run: dotnet test src/QuestTests
    - name: Publish
      run: dotnet publish src/Quest/ -o artifact -f net5.0 -r linux-x64 -c Release --self-contained
    - name: Check artifact
      run: ./artifact/Quest help
    - name: Compress
      run: tar -zcvf quest.tar.gz artifact/Quest
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./quest.tar.gz
        asset_name: quest.tar.gz
        asset_content_type: application/x-gzip
  Windows_build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.101
    - name: Install dependencies
      run: dotnet restore src\\Quest
    - name: Build
      run: dotnet build src\\Quest --configuration Release --no-restore
    - name: Test
      run: dotnet test src\\QuestTests
    - name: Publish
      run: dotnet publish src\\Quest -o artifact -f net5.0 -r win-x64 -c Release --self-contained
    - name: Check artifact
      run: artifact\\Quest.exe help
    - name: Compress
      run: compress-archive -path 'artifact\\Quest.exe' -destinationpath 'quest.zip'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./quest.zip
        asset_name: quest.zip
        asset_content_type: application/zip
